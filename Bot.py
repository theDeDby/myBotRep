import asyncio
import logging
from datetime import datetime
import os
from telegram import (# type: ignore
    Update,BotCommand) 
from telegram.ext import ( # type: ignore
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler# type: ignore
from datetime import datetime, timedelta
import random
import sys
import nest_asyncio # type: ignore
from pymongo import MongoClient # type: ignore
from flask import Flask # type: ignore
from threading import Thread

#
#   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
#
MONGO_URI = os.getenv("MONGO_URI")

client = MongoClient(MONGO_URI)
# –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π
db = client["aria_bot"]  # –±–∞–∑–∞
schedule_col = db["schedules"]  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
tasks_col = db["tasks"]  # –∑–∞–¥–∞–Ω–∏—è

#
#   –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ (–ß—Ç–æ–±—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–µ –±–∏–ª–∏)
#
nest_asyncio.apply()
if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
#
#   –§—É–Ω–∫—Ü–∏–∏
#
random_hi = ["–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Ä–∏—è.", "–Ø –ê—Ä–∏—è, —Ä–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!", "–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ! –ê—Ä–∏—è.","–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –Ø –ê—Ä–∏—è",
             "–°–∞–ª—é—Ç! –ê—Ä–∏—è –Ω–∞ —Å–≤—è–∑–∏.","–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Ä–∏—è.","–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –Ø ‚Äî –ê—Ä–∏—è.","–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ê—Ä–∏—è, —Ç–≤–æ–π —Å–ø—É—Ç–Ω–∏–∫.",
             "–ô–æ! –ê—Ä–∏—è –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º.","–û, —Ç—ã –∑–¥–µ—Å—å! –Ø –ê—Ä–∏—è, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.","–ê—Ä–∏—è –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è —Å —Ç–æ–±–æ–π!","–•—ç–π! –Ø –ê—Ä–∏—è. –ù–∞–¥–µ—é—Å—å, –ø–æ–¥—Ä—É–∂–∏–º—Å—è.",
             "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã –ø—Ä–∏—à—ë–ª! –Ø ‚Äî –ê—Ä–∏—è."]

#   –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ –≤—Ä–µ–º—è
def time_str_to_datetime(time_str):
    return datetime.strptime(time_str, "%H:%M")

#   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def is_conflict_schedule(user_id, day, new_start_str):
    new_start = time_str_to_datetime(new_start_str)
    new_end = new_start + timedelta(hours=1, minutes=30)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏–∑ MongoDB
    entries = schedule_col.find({"user_id": user_id, "day": day})

    for entry in entries:
        exist_start = time_str_to_datetime(entry["time"])
        exist_end = exist_start + timedelta(hours=1, minutes=30)

        if (new_start < exist_end) and (exist_start < new_end):
            return True  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ

    return False  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–µ—Ç

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ ‚Äî –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)

user_schedules = {}  # user_id -> {weekday: [(time, subject)]}
user_tasks = []      # [{user_id, subject, datetime, description}]

# –õ–æ–≥–≥–∏–Ω–≥
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

# ========== –ö–æ–º–∞–Ω–¥—ã ==========

#   –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random_hi[random.randint(0,2)]
    await update.message.reply_text(random_hi[random.randint(0,12)])

#   –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏ (–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥)
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n" \
    "============== –ë–∞–∑–æ–≤—ã–µ ==============\n" \
    "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" \
    "/help ‚Äî –ø–æ–º–æ—â—å\n" \
    "\n" \
    "============== –†–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ==============\n" \
    "/add_schedule ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" \
    "/add_task ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n" \
    "/view_schedule ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" \
    "/view_tasks ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")

# 1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
async def add_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        day, time_str, subject = context.args[0], context.args[1], " ".join(context.args[2:])
        day = day.capitalize()


        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ MongoDB
        new_start = datetime.strptime(time_str, "%H:%M")
        new_end = new_start + timedelta(hours=1, minutes=30)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        existing = schedule_col.find({"user_id": user_id, "day": day})

        for item in existing:
            exist_start = datetime.strptime(item["time"], "%H:%M")
            exist_end = exist_start + timedelta(hours=1, minutes=30)
            if (new_start < exist_end) and (exist_start < new_end):
                await update.message.reply_text("–û—à–∏–±–∫–∞: –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∏–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º.")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
        schedule_col.insert_one({
            "user_id": user_id,
            "day": day,
            "time": time_str,
            "subject": subject
        })

        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {day}, {time_str} ‚Äî {subject}")

    except Exception as e:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_schedule –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 14:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")

# 2. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        subject = context.args[0]
        date_str = context.args[1] + " " + context.args[2]
        description = " ".join(context.args[3:])
        task_time = datetime.strptime(date_str, "%Y-%m-%d %H:%M")

        task = {
            "user_id": user_id,
            "subject": subject,
            "time": task_time,
            "desc": description
        }

        tasks_col.insert_one(task)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
        scheduler.add_job(send_task_reminder, 'date', run_date=task_time, args=[user_id, subject, description])

        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {subject} ‚Äî {description} –≤ {task_time}")

    except Exception as e:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_task –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 2025-06-22 18:00 –°–¥–µ–ª–∞—Ç—å –¥–∑")

# 3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def view_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor = schedule_col.find({"user_id": user_id})
    schedule = {}
    for item in cursor:  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å motor, —Ç—É—Ç async; –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π for
        # –ù–æ —Å pymongo –ø—Ä–æ—Å—Ç–æ for
        # –ú–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ü–∏–∫–ª:
        pass

    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å pymongo (–Ω–µ motor), —Ç–æ —Ç–∞–∫:
    schedule_items = list(schedule_col.find({"user_id": user_id}))

    if not schedule_items:
        await update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
        return

    schedule = {}
    for item in schedule_items:
        day = item["day"]
        if day not in schedule:
            schedule[day] = []
        schedule[day].append((item["time"], item["subject"]))

    text = "–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    for day, entries in schedule.items():
        text += f"{day}\n"
        for time, subject in sorted(entries):
            text += f"{time}: {subject}\n"
    await update.message.reply_text(text)

# 4. –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
async def view_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tasks = list(tasks_col.find({"user_id": user_id}))

    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á.")
        return

    text = "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
    for t in tasks:
        text += f"{t['subject']} ‚Äî {t['desc']} –≤ {t['time'].strftime('%Y-%m-%d %H:%M')}\n"
    await update.message.reply_text(text)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_task_reminder(user_id, subject, desc):
    try:
        await app.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}: {desc}")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)

# –î–æ–ø–∫–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def schedule_send_task_reminder(user_id, subject, desc):
    asyncio.create_task(send_task_reminder(user_id, subject, desc))
#   
#   –¢–æ–∫–µ–Ω –∏ –∫–æ–º–∞–Ω–¥—ã
#
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("add_schedule", add_schedule))
app.add_handler(CommandHandler("add_task", add_task))
app.add_handler(CommandHandler("view_schedule", view_schedule))
app.add_handler(CommandHandler("view_tasks", view_tasks))
#
#   –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
#
async def set_commands(app):
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ –∫–æ–º–º–∞–Ω–¥—ã"),
        BotCommand("add_schedule", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand("add_task", "–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"),
        BotCommand("view_schedule", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand("view_tasks", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏"),
    ]
    await app.bot.set_my_commands(commands)

#
#   –≥–æ–≤–æ—Ä–∏–º –±–æ—Ç—É –∂–∏—Ç—å 
# 
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "–Ø –∂–∏–≤!"

def run():
    app_flask.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

#
#   –ó–∞–ø—É—Å–∫ —è —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é
#
async def main():
    scheduler.start()
    await set_commands(app)
    await app.run_polling()

if __name__ == '__main__':
    nest_asyncio.apply()
    keep_alive()
    asyncio.get_event_loop().run_until_complete(main())
